@startuml Diagram

package "Java" {
	class Game {
		- day : int
		- power : int
		- defaultPower : int
		- points : int
		- maxDays : int
		- currentRoom : Room
		- commands : ValidActions
		- inventory : Inventory
		- maxDays : maxDays
		- extraPowerList : ArrayList<Integer>
		- activityManager : ActivityManager
		- Game()
		+ {static} getInstance() : Game
		+ calcDefaultPower() : int
		+ makeExtraPowerList() : void
		+ createRooms() : void
		+ goRoom() : boolean
		+ pickupItem(Command command) : boolean
		+ quit() : boolean
		+ getRandomExtraPower() : int
		+ getRoomDescription() : String
		+ getAppliancesInRoom() : String
		+ getInventory() : String
		+ getActivity() : String
		+ getCurrentRoom() : Room
		+ getCommands() : ValidActions
		+ getCommandDescriptions() : List<String>
		+ getCommand() : Command
		+ addPoints() : void
        + removePoints(int n) : void
        + removePower(int n) : void
		+ isLastDay() : boolean
		+ setNextDay() : void
		+ getPower() : int
		+ setPower() : void
		+ getPoint() : int
        + setPoints(int n) : void
        + getDay() : int
	}

	class Room {
		- description : String
		- exits : HashMap<String, Room>
		- roomAppliance : HashMap<String, Appliance>
		- roomItems : HashMap<String, Item>
		+ createAppliance(String name, Activity activityReference) : Appliance
		+ hasAppliance(String applianceName) : Appliance
		+ createItem(String name, Appliance applianceReference) : Item
		+ removeItem(String itemName) : void
		+ hasItem(String itemName) : boolean
		+ getExitString() : String
		+ setExit(String direction, Room neighbour) : void
		+ getExit(String direction) : Room
		+ getApplianceActivity(Appliance appliance) : Activity
		+ getShortDescription() : String
		+ getLongDescription() : String
		+ getAppliance(String applianceKey) : Appliance
		+ getApplianceString() : String
		+ getItem(String itemKey) : Item
		+ getItemsString() : String
	}

	' interface Command {
	'     + getCommandName() : Actions
	'     + getCommandValue() : String
	'     + hasCommandValue() : boolean
	'     + isUnknown() : boolean
	' }

	class CommandImplementation {
		- commandNames : Commands
		- commandValue : String
		+ getCommandName() : Commands
		+ getCommandValue() : String
		+ hasCommandValue() : boolean
		+ isUnknown() : boolean
	}

	' interface ValidActions {
	'     + getAction(String commandWord) : Actions
	'     + isAction(String aString) : boolean
	'     + getActionWords() : List<String>
	' }

	class ValidActionsImplementation {
		- validActions : HashMap<String, Actions>
		+ getAction(String actionWord) : Actions
		+ isAction(String aString) : boolean
		+ getActionWords() : List<String>
	}

	enum Actions {
		..constants..
		GO
		QUIT
		HELP
		INVENTORY
		PICKUP
		ACTIVITIES
		IMLOST
		POWER
		UNKNOWN
		__
		- actionName : String
		__
		+ toString() : String
	}
}



package "Java/TextUI" {
    class WorldOfZuulApplication {
        + main(String[] args) : void
    }

    class Parser {
        - reader : Scanner
        + getCommand() : Command
    }

    class CommandLineClient {
        - parser : Parser
        - game : Game
        + play() : void
        + printWelcome() : void
		+ printHelp() : void
        + processCommand(Command command) : boolean
    }
}



package "Java/Classes" {
	class Player {
		- currentRoom : Room
		+ addItemToInventory() : void
		+ removeItemFromInventory() : void
		+ getCurrentRoom() : Room
		+ getInventory() : ArrayList<Item>
	}


	class Inventory {
		- listOfItems : ArrayList<Item>
		+ addItem(Item item) : void
		+ removeItem(Item item) : void
		+ getInventoryList() : ArrayList<Item>
		+ isEmpty() : boolean
		+ toString() : String
	}


	class Item {
		- name : String
		- applianceReference : Appliance
		+ getName() : String
		+ getApplianceReference() : Appliance
	}


	class Appliance {
		- name : String
		- roomReference : Room
		- activityReference : Activity
		+ getName() : String
		+ getRoomReference() : Room
		+ getActivityReference() : Activity
	}


	class ActivityManager {
		+ listOfActivities : ArrayList<Activity>
		+ addActivity(Activity activity) : void
		+ removeActivity(Activity activity) : void
		+ addPoints(Activity activity) : void
		+ removePoints(Activity activity) : void
		+ removePower(Activity activity) : void
		+ toString() : String
	}


	class Activity {
	    - name : String
		- successPoints : int
		- failurePoints : int
		- powerCost : int
		- daily : boolean
		- activityDone : boolean
		+ getName() : String
		+ getSuccessPoints() : int
		+ setSuccessPoints(int points) : void
		+ getFailurePoints() : int
		+ setFailurePoints(int points) : void
		+ getPowerCost() : int
		+ setPowerCost(int PowerCost) : void
		+ isDaily() : boolean
		+ isActivityDone() : boolean
		+ setActivityDone() : void
	}
}


WorldOfZuulApplication .right> CommandLineClient

CommandLineClient ..> Parser
CommandLineClient .> Game
CommandLineClient ..> Actions

Parser ..> CommandImplementation

Game .> Room
Game ..> ValidActionsImplementation
Game ..> CommandImplementation
Game ..> ActivityManager

Room ..> Appliance

ValidActionsImplementation ..> CommandImplementation
ValidActionsImplementation ..> Actions

CommandImplementation ..> Actions

Player .> Inventory
Player .> Game
Player ..> Appliance

Inventory ..> Item

Appliance ..> Activity

ActivityManager ..> Activity

Activity ..> Item

' ValidActions ..> ValidActionsImplementation
' Command .> CommandImplementation


@enduml